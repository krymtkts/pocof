<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Select-Pocof</command:name>
      <maml:description>
        <maml:para>Selects objects from a collection based on interactive query.</maml:para>
      </maml:description>
      <command:verb>Select</command:verb>
      <command:noun>Pocof</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Select-Pocof` cmdlet selects objects from a collection based on interactive query. For example, you can use the `Select-Pocof` cmdlet to select files that located current directory with interactive window.</maml:para>
      <maml:para>You can use 3 matching mode `Match`, `Like` or `Eq` and can use 3 operator mode `And` or `Or`.</maml:para>
      <maml:para>By default, the query matches to the stringified object. A query starting with a colon, such as `:property-name`, indicates a property query. In a property query, you can specify the property value using the format `:property-name property-value`. If you use a property query, the query will match to the specified object properties.</maml:para>
      <maml:para>Recommend using `$PSDefaultParameterValues` if you want to use a specific option. For example `Layout`, `Prompt` and so on.</maml:para>
      <maml:para>`$PSDefaultParameterValues = @{'Select-Pocof:Layout' = 'TopDownHalf'; 'Select-Pocof:Prompt'= ''}`</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Select-Pocof</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CaseSensitive</maml:name>
          <maml:description>
            <maml:para>Filtering in case-sensitive.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies the objects to filter. You can also pipe the objects to `Select-Pocof`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSObject[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InvertQuery</maml:name>
          <maml:description>
            <maml:para>Enabling `InvertQuery` will invert the filtering output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Keymaps</maml:name>
          <maml:description>
            <maml:para>Specifies the custom key bindings. Custom keymaps overrides default keymaps.
Default keymaps are following.</maml:para>
            <maml:para>| Action                   | Keybinding             | Note                 |
| ------------------------ | ---------------------- | -------------------- |
| Cancel                   | `Escape`               |                      |
| Cancel                   | `Ctrl` + `C`           |                      |
| Finish                   | `Enter`                |                      |
| BackwardChar             | `LeftArrow`            |                      |
| ForwardChar              | `RightArrow`           |                      |
| BeginningOfLine          | `Home`                 |                      |
| EndOfLine                | `End`                  |                      |
| DeleteBackwardChar       | `Backspace`            |                      |
| DeleteForwardChar        | `Delete`               |                      |
| DeleteBackwardInput      | `Ctrl` + `Home`        |                      |
| DeleteForwardInput       | `Ctrl` + `End`         |                      |
| SelectBackwardChar       | `Shift` + `LeftArrow`  |                      |
| SelectForwardChar        | `Shift` + `RightArrow` |                      |
| SelectToBeginningOfLine  | `Shift` + `Home`       |                      |
| SelectToEndOfLine        | `Shift` + `End`        |                      |
| RotateMatcher            | `Alt` + `R`            |                      |
| RotateOperator           | `Alt` + `L`            |                      |
| ToggleCaseSensitive      | `Alt` + `C`            |                      |
| ToggleInvertFilter       | `Alt` + `I`            |                      |
| ToggleSuppressProperties | `Ctrl` + `Spacebar`    |                      |
| SelectLineUp             | `UpArrow`              | Not implemented yet. |
| SelectLineDown           | `DownArrow`            | Not implemented yet. |
| ScrollPageUp             | `PageUp`               | Not implemented yet. |
| ScrollPageDown           | `PageDown`             | Not implemented yet. |
| CompleteProperty         | `Tab`                  |                      |</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Layout</maml:name>
          <maml:description>
            <maml:para>Select the layout: TopDown, TopDownHalf, BottomUp or BottomUpHalf.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Matcher</maml:name>
          <maml:description>
            <maml:para>Select the matching mode. You can use `Match`, `Like` or `Eq`.</maml:para>
            <maml:para>- `Match` provides regular expression matching
- `Like` provides wildcard matching
- `Eq` provides exact matching</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NonInteractive</maml:name>
          <maml:description>
            <maml:para>Enabling `NonInteractive` starts the application in non-interactive mode.
Mainly used for testing purposes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Operator</maml:name>
          <maml:description>
            <maml:para>Select the logical operator to use when specifying query strings.
You can use `And` or `Or`.</maml:para>
            <maml:para>- `And` provides logical "And" to multi query generated from splitting query by whitespace
- `Or` provides logical "Or" to multi query generated from splitting query by whitespace</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Prompt</maml:name>
          <maml:description>
            <maml:para>Specifies the prompt that appears before the query input space.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>Specifies the initial query string.</maml:para>
            <maml:para>The syntax of the query is simple.
You separate the values you want to filter with a space.</maml:para>
            <maml:para>`Value1 Value2 Value3`</maml:para>
            <maml:para>The property query is a combination of the property name and the filtering value.
The property name in the query starts with `:` followed by a space, and then the filter value like following.</maml:para>
            <maml:para>`:PropertyName FilteringValue`</maml:para>
            <maml:para>You can also combine normal filtering with property queries.</maml:para>
            <maml:para>`Value1 Value2 :PropertyName Value3`</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SuppressProperties</maml:name>
          <maml:description>
            <maml:para>Enabling `SuppressProperties` will disable the display of properties under the query input.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Unique</maml:name>
          <maml:description>
            <maml:para>Enabling `Unique` will exclude duplicates in `InputObject`.
`Unique` maintains the order of InputObject after excluding duplicates.
`Unique` uses the `Equals` and `GetHashCode` methods of `InputObject` to check for equality.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WordDelimiters</maml:name>
          <maml:description>
            <maml:para>Specifies the characters that delimit words for word-based cursor movement, selection or deletion functions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Select-Pocof</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CaseSensitive</maml:name>
          <maml:description>
            <maml:para>Filtering in case-sensitive.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>InputObject</maml:name>
          <maml:description>
            <maml:para>Specifies the objects to filter. You can also pipe the objects to `Select-Pocof`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSObject[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>InvertQuery</maml:name>
          <maml:description>
            <maml:para>Enabling `InvertQuery` will invert the filtering output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Keymaps</maml:name>
          <maml:description>
            <maml:para>Specifies the custom key bindings. Custom keymaps overrides default keymaps.
Default keymaps are following.</maml:para>
            <maml:para>| Action                   | Keybinding             | Note                 |
| ------------------------ | ---------------------- | -------------------- |
| Cancel                   | `Escape`               |                      |
| Cancel                   | `Ctrl` + `C`           |                      |
| Finish                   | `Enter`                |                      |
| BackwardChar             | `LeftArrow`            |                      |
| ForwardChar              | `RightArrow`           |                      |
| BeginningOfLine          | `Home`                 |                      |
| EndOfLine                | `End`                  |                      |
| DeleteBackwardChar       | `Backspace`            |                      |
| DeleteForwardChar        | `Delete`               |                      |
| DeleteBackwardInput      | `Ctrl` + `Home`        |                      |
| DeleteForwardInput       | `Ctrl` + `End`         |                      |
| SelectBackwardChar       | `Shift` + `LeftArrow`  |                      |
| SelectForwardChar        | `Shift` + `RightArrow` |                      |
| SelectToBeginningOfLine  | `Shift` + `Home`       |                      |
| SelectToEndOfLine        | `Shift` + `End`        |                      |
| RotateMatcher            | `Alt` + `R`            |                      |
| RotateOperator           | `Alt` + `L`            |                      |
| ToggleCaseSensitive      | `Alt` + `C`            |                      |
| ToggleInvertFilter       | `Alt` + `I`            |                      |
| ToggleSuppressProperties | `Ctrl` + `Spacebar`    |                      |
| SelectLineUp             | `UpArrow`              | Not implemented yet. |
| SelectLineDown           | `DownArrow`            | Not implemented yet. |
| ScrollPageUp             | `PageUp`               | Not implemented yet. |
| ScrollPageDown           | `PageDown`             | Not implemented yet. |
| CompleteProperty         | `Tab`                  |                      |</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Layout</maml:name>
          <maml:description>
            <maml:para>Select the layout: TopDown, TopDownHalf, BottomUp or BottomUpHalf.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Matcher</maml:name>
          <maml:description>
            <maml:para>Select the matching mode. You can use `Match`, `Like` or `Eq`.</maml:para>
            <maml:para>- `Match` provides regular expression matching
- `Like` provides wildcard matching
- `Eq` provides exact matching</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NonInteractive</maml:name>
          <maml:description>
            <maml:para>Enabling `NonInteractive` starts the application in non-interactive mode.
Mainly used for testing purposes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Operator</maml:name>
          <maml:description>
            <maml:para>Select the logical operator to use when specifying query strings.
You can use `And` or `Or`.</maml:para>
            <maml:para>- `And` provides logical "And" to multi query generated from splitting query by whitespace
- `Or` provides logical "Or" to multi query generated from splitting query by whitespace</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Prompt</maml:name>
          <maml:description>
            <maml:para>Specifies the prompt that appears before the query input space.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>Specifies the initial query string.</maml:para>
            <maml:para>The syntax of the query is simple.
You separate the values you want to filter with a space.</maml:para>
            <maml:para>`Value1 Value2 Value3`</maml:para>
            <maml:para>The property query is a combination of the property name and the filtering value.
The property name in the query starts with `:` followed by a space, and then the filter value like following.</maml:para>
            <maml:para>`:PropertyName FilteringValue`</maml:para>
            <maml:para>You can also combine normal filtering with property queries.</maml:para>
            <maml:para>`Value1 Value2 :PropertyName Value3`</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SuppressProperties</maml:name>
          <maml:description>
            <maml:para>Enabling `SuppressProperties` will disable the display of properties under the query input.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Unique</maml:name>
          <maml:description>
            <maml:para>Enabling `Unique` will exclude duplicates in `InputObject`.
`Unique` maintains the order of InputObject after excluding duplicates.
`Unique` uses the `Equals` and `GetHashCode` methods of `InputObject` to check for equality.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WordDelimiters</maml:name>
          <maml:description>
            <maml:para>Specifies the characters that delimit words for word-based cursor movement, selection or deletion functions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>CaseSensitive</maml:name>
        <maml:description>
          <maml:para>Filtering in case-sensitive.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>InputObject</maml:name>
        <maml:description>
          <maml:para>Specifies the objects to filter. You can also pipe the objects to `Select-Pocof`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.PSObject[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>InvertQuery</maml:name>
        <maml:description>
          <maml:para>Enabling `InvertQuery` will invert the filtering output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Keymaps</maml:name>
        <maml:description>
          <maml:para>Specifies the custom key bindings. Custom keymaps overrides default keymaps.
Default keymaps are following.</maml:para>
          <maml:para>| Action                   | Keybinding             | Note                 |
| ------------------------ | ---------------------- | -------------------- |
| Cancel                   | `Escape`               |                      |
| Cancel                   | `Ctrl` + `C`           |                      |
| Finish                   | `Enter`                |                      |
| BackwardChar             | `LeftArrow`            |                      |
| ForwardChar              | `RightArrow`           |                      |
| BeginningOfLine          | `Home`                 |                      |
| EndOfLine                | `End`                  |                      |
| DeleteBackwardChar       | `Backspace`            |                      |
| DeleteForwardChar        | `Delete`               |                      |
| DeleteBackwardInput      | `Ctrl` + `Home`        |                      |
| DeleteForwardInput       | `Ctrl` + `End`         |                      |
| SelectBackwardChar       | `Shift` + `LeftArrow`  |                      |
| SelectForwardChar        | `Shift` + `RightArrow` |                      |
| SelectToBeginningOfLine  | `Shift` + `Home`       |                      |
| SelectToEndOfLine        | `Shift` + `End`        |                      |
| RotateMatcher            | `Alt` + `R`            |                      |
| RotateOperator           | `Alt` + `L`            |                      |
| ToggleCaseSensitive      | `Alt` + `C`            |                      |
| ToggleInvertFilter       | `Alt` + `I`            |                      |
| ToggleSuppressProperties | `Ctrl` + `Spacebar`    |                      |
| SelectLineUp             | `UpArrow`              | Not implemented yet. |
| SelectLineDown           | `DownArrow`            | Not implemented yet. |
| ScrollPageUp             | `PageUp`               | Not implemented yet. |
| ScrollPageDown           | `PageDown`             | Not implemented yet. |
| CompleteProperty         | `Tab`                  |                      |</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Collections.Hashtable</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Layout</maml:name>
        <maml:description>
          <maml:para>Select the layout: TopDown, TopDownHalf, BottomUp or BottomUpHalf.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Matcher</maml:name>
        <maml:description>
          <maml:para>Select the matching mode. You can use `Match`, `Like` or `Eq`.</maml:para>
          <maml:para>- `Match` provides regular expression matching
- `Like` provides wildcard matching
- `Eq` provides exact matching</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NonInteractive</maml:name>
        <maml:description>
          <maml:para>Enabling `NonInteractive` starts the application in non-interactive mode.
Mainly used for testing purposes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Operator</maml:name>
        <maml:description>
          <maml:para>Select the logical operator to use when specifying query strings.
You can use `And` or `Or`.</maml:para>
          <maml:para>- `And` provides logical "And" to multi query generated from splitting query by whitespace
- `Or` provides logical "Or" to multi query generated from splitting query by whitespace</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Prompt</maml:name>
        <maml:description>
          <maml:para>Specifies the prompt that appears before the query input space.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Query</maml:name>
        <maml:description>
          <maml:para>Specifies the initial query string.</maml:para>
          <maml:para>The syntax of the query is simple.
You separate the values you want to filter with a space.</maml:para>
          <maml:para>`Value1 Value2 Value3`</maml:para>
          <maml:para>The property query is a combination of the property name and the filtering value.
The property name in the query starts with `:` followed by a space, and then the filter value like following.</maml:para>
          <maml:para>`:PropertyName FilteringValue`</maml:para>
          <maml:para>You can also combine normal filtering with property queries.</maml:para>
          <maml:para>`Value1 Value2 :PropertyName Value3`</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SuppressProperties</maml:name>
        <maml:description>
          <maml:para>Enabling `SuppressProperties` will disable the display of properties under the query input.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Unique</maml:name>
        <maml:description>
          <maml:para>Enabling `Unique` will exclude duplicates in `InputObject`.
`Unique` maintains the order of InputObject after excluding duplicates.
`Unique` uses the `Equals` and `GetHashCode` methods of `InputObject` to check for equality.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WordDelimiters</maml:name>
        <maml:description>
          <maml:para>Specifies the characters that delimit words for word-based cursor movement, selection or deletion functions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>{{ Fill in the Description }}</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>{{ Fill in the Description }}</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>Includes the following aliases for `Select-Pocof`

- `pocof`</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Get current directory items with interactive filtering ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Get-ChildItem | Select-Pocof
```</maml:para>
          <maml:para>Interactively filter the output of `Get-ChildItem`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Filter with multiple options ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Get-ChildItem | Select-Pocof -CaseSensitive -Query 'docs md' | Invoke-Item
```</maml:para>
          <maml:para>Interactively filter the output of `Get-ChildItem` with an initial case-sensitive query.
And performs the default action on the filtered items.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 3: Filter with property query ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; Get-ChildItem | Select-Pocof -NonInteractive -Query ':Name foo'
```</maml:para>
          <maml:para>Interactively filter the output of `Get-ChildItem` using a property query.
The property name in the query starts with `:` followed by a space, and then the filter value. The format is as follows.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Filter hashtable ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
PS C:\&gt; @{foo=100; bar=101; foobar=102} | Select-Pocof -NonInteractive -Query ':key foo' | % -Begin {$x = @{}} {$x[$_.Key]= $_.Value} -End {$x}
```</maml:para>
          <maml:para>Interactively filter hashtable and create new hashtable from filtered items.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
</helpItems>